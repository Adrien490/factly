generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String   @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @default(now())
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @default(now())
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Authenticator {
  id                   String  @id @default(cuid())
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?
  user                 User    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String                   @id @default(cuid())
  name          String?
  email         String                   @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime                 @default(now())
  updatedAt     DateTime                 @default(now())
  accounts      Account[]
  Authenticator Authenticator[]
  clients       Client[]
  memberships   OrganizationMembership[]
  sessions      Session[]
}

model Organization {
  id              String                   @id @default(cuid())
  name            String
  siren           String?
  siret           String?
  vatNumber       String?
  vatOptionDebits Boolean?                 @default(false)
  legalForm       String?
  rcsNumber       String?
  capital         Float?
  address         String?
  city            String?
  zipCode         String?
  country         String?
  phone           String?
  email           String?
  website         String?
  createdAt       DateTime                 @default(now())
  updatedAt       DateTime                 @default(now())
  clients         Client[]
  memberships     OrganizationMembership[]
}

model OrganizationMembership {
  id             String           @id @default(cuid())
  userId         String
  organizationId String
  role           OrganizationRole @default(MEMBER)
  status         MembershipStatus @default(PENDING)
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @default(now())
  organization   Organization     @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  user           User             @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, organizationId])
  @@index([status])
}

model Client {
  id             String          @id @default(cuid())
  reference      String          @unique
  name           String
  email          String?
  phone          String?
  vatNumber      String?
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  userId         String
  clientType     ClientType      @default(COMPANY)
  organizationId String
  siren          String?
  civility       Civility?
  legalForm      LegalForm?
  siret          String?
  status         ClientStatus    @default(LEAD)
  website        String?
  addresses      Address[]
  organization   Organization    @relation(fields: [organizationId], references: [id])
  user           User            @relation(fields: [userId], references: [id])
  contacts       ClientContact[]

  @@index([name])
  @@index([status])
  @@index([siren])
  @@index([siret])
}

model ClientContact {
  id        String   @id @default(cuid())
  firstName String
  lastName  String
  email     String?
  phone     String?
  isDefault Boolean? @default(false)
  title     String?
  clientId  String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  client    Client   @relation(fields: [clientId], references: [id], onDelete: Cascade)

  @@index([clientId])
}

model Address {
  id          String      @id @default(cuid())
  addressType AddressType
  line1       String
  line2       String?
  zipCode     String
  city        String
  country     String
  isDefault   Boolean     @default(false)
  clientId    String
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @default(now())
  client      Client      @relation(fields: [clientId], references: [id], onDelete: Cascade)

  @@unique([clientId, addressType, isDefault])
  @@index([clientId])
  @@index([addressType])
}

enum ClientType {
  INDIVIDUAL
  COMPANY
}

enum OrganizationRole {
  OWNER
  ADMIN
  MEMBER
}

enum MembershipStatus {
  PENDING
  ACTIVE
  REVOKED
}

enum AddressType {
  BILLING
  DELIVERY
}

enum ClientStatus {
  LEAD
  PROSPECT
  ACTIVE
  INACTIVE
  ARCHIVED
}

enum LegalForm {
  AUTO_ENTREPRENEUR
  EI
  EIRL
  EURL
  SARL
  SAS
  SASU
  SA
  SCI
  SCM
  SNC
  ASSOCIATION
  AUTRE
}

enum Civility {
  M
  Mme
  Mlle
}

enum Country {
  FR
  BE
  DE
  ES
  IT
}
