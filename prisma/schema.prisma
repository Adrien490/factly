generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Nouvelle table pour l'année fiscale

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

model User {
  id            String   @id
  name          String
  email         String   @unique
  emailVerified Boolean
  image         String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  organizations Organization[] @relation("UserOrganizations")
  members       Member[]
  clients       Client[]
  sessions      Session[]
  accounts      Account[]

  @@map("user")
}

model Organization {
  id        String  @id @default(cuid())
  name      String
  legalName String?
  logoUrl   String?
  email     String?
  phone     String?
  website   String?
  siren     String? @unique
  siret     String? @unique
  vatNumber String? @unique

  // Adresse intégrée
  addressLine1 String? // Ligne principale de l'adresse
  addressLine2 String? // Informations complémentaires
  city         String? // Ville
  postalCode   String? // Code postal
  region       String? // Région, département
  country      String? @default("France") // Pays

  // Informations légales françaises
  legalForm         LegalForm? // Forme juridique (SARL, SAS, etc.)
  nafCode           String? // Code NAF/APE
  rcsNumber         String? // Numéro RCS
  rcsCity           String? // Ville du greffe d'immatriculation
  capitalAmount     Float? // Capital social
  intracomVatNumber String? // Numéro de TVA intracommunautaire

  // Paramètres de facturation française
  invoicePrefix     String? // Préfixe pour les numéros de factures
  quotePrefix       String? // Préfixe pour les numéros de devis
  nextInvoiceNumber Int     @default(1) // Prochain numéro de facture
  nextQuoteNumber   Int     @default(1) // Prochain numéro de devis

  // Informations bancaires (nécessaires pour les virements SEPA et les prélèvements)
  bankName        String? // Nom de la banque
  bankAccountIBAN String? // IBAN
  bankAccountBIC  String? // BIC/SWIFT

  // Mentions légales obligatoires pour factures
  invoiceFooter String? // Texte en pied de page des factures

  // Paramètres TVA spécifiques
  vatMethod               String? @default("DEBIT") // DEBIT ou ENCAISSEMENT
  vatDeclarationType      String? @default("CA3") // CA3, CA12, etc.
  vatDeclarationFrequency String? @default("MONTHLY") // MONTHLY, QUARTERLY, ANNUAL

  // Paramètres d'intégration comptable
  accountingSystemType   String? // SAGE, EBP, CEGID, etc.
  accountingExportFormat String? // Format d'export comptable préféré
  defaultJournalCode     String? // Code journal ventes (ex: VE)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  members     Member[]
  clients     Client[]
  invitations Invitation[]
  fiscalYears FiscalYear[] // Relation avec les années fiscales

  // Relations pour la gestion commerciale
  products   Product[]
  categories ProductCategory[]
  invoices   Invoice[]
  quotes     Quote[]
  taxRates   TaxRate[]
  suppliers  Supplier[]

  // Relation avec User (créateur)
  creator   User?       @relation("UserOrganizations", fields: [creatorId], references: [id])
  creatorId String?
  Warehouse Warehouse[]
}

model FiscalYear {
  id          String           @id @default(cuid())
  name        String // Ex: "Année fiscale 2023-2024"
  description String? // Description optionnelle
  startDate   DateTime // Date de début
  endDate     DateTime // Date de fin
  status      FiscalYearStatus @default(ACTIVE)
  isCurrent   Boolean          @default(false) // Indique l'année fiscale courante
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt

  // Relations
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  organizationId String

  @@index([organizationId])
  @@index([startDate, endDate])
  @@index([status])
}

// Enum pour le statut de l'année fiscale

enum FiscalYearStatus {
  ACTIVE // Année fiscale en cours ou future
  CLOSED // Année fiscale clôturée, mais pas encore archivée
  ARCHIVED // Année fiscale archivée, consultable mais non modifiable
}

model Member {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId         String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  organizationId String

  @@unique([userId, organizationId])
}

model Invitation {
  id        String           @id @default(cuid())
  email     String
  status    InvitationStatus @default(PENDING)
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt

  // Relations
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  organizationId String
}

model Supplier {
  id        String  @id @default(cuid())
  reference String // Code fournisseur interne
  name      String // Nom commercial
  legalName String? // Raison sociale
  email     String?
  phone     String?
  website   String?
  logoUrl   String?

  // Informations fiscales et légales
  siren              String?
  siret              String?
  vatNumber          String?
  registrationNumber String? // N° d'immatriculation

  // Classification et évaluation
  supplierType      SupplierType   @default(MANUFACTURER)
  status            SupplierStatus @default(ACTIVE)
  paymentTerms      Int?           @default(30) // Délai de paiement en jours
  minimumOrderValue Float? // Commande minimum
  preferredCurrency String?        @default("EUR")
  creditLimit       Float? // Limite de crédit accordée

  // Évaluation et performance
  reliabilityScore   Int? // Score de 0-100
  qualityScore       Int? // Score de 0-100
  leadTimeAvg        Int? // Délai moyen de livraison en jours
  lastEvaluationDate DateTime? // Date dernière évaluation

  // Informations commerciales
  discountRate Float? // Taux de remise standard
  notes        String? // Notes sur le fournisseur

  // Métadonnées
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  organization   Organization      @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  organizationId String
  addresses      Address[]
  contacts       Contact[]
  products       ProductSupplier[]

  // Indicateurs 2025
  esgScore                     Int? // Score environnemental, social et gouvernance
  carbonFootprint              Float? // Empreinte carbone
  localSupplier                Boolean @default(false) // Fournisseur local
  sustainabilityCertifications String? // Certifications développement durable

  @@unique([reference, organizationId])
  @@index([name])
  @@index([status, organizationId])
  @@index([supplierType, organizationId])
  @@index([createdAt])
  @@index([reliabilityScore, qualityScore]) // Pour filtrer les meilleurs fournisseurs
}

model Contact {
  id        String    @id @default(cuid())
  civility  Civility?
  firstName String
  lastName  String
  email     String?
  phone     String?
  title     String?
  isDefault Boolean   @default(false)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  // Relations
  supplier   Supplier @relation(fields: [supplierId], references: [id], onDelete: Cascade)
  supplierId String

  client   Client? @relation(fields: [clientId], references: [id])
  clientId String?
}

model Address {
  id           String   @id @default(cuid())
  addressLine1 String
  addressLine2 String?
  postalCode   String
  city         String
  country      String   @default("France")
  latitude     Float?
  longitude    Float?
  isDefault    Boolean  @default(false)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  supplier   Supplier? @relation(fields: [supplierId], references: [id])
  supplierId String?
  Client     Client?   @relation(fields: [clientId], references: [id])
  clientId   String?

  @@index([supplierId])
}

model ProductSupplier {
  id String @id @default(cuid())

  // Relations
  product    Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId  String
  supplier   Supplier @relation(fields: [supplierId], references: [id], onDelete: Cascade)
  supplierId String

  // Métadonnées
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([productId, supplierId])
}

// Modifications du modèle Client existant
model Client {
  id         String       @id @default(cuid())
  reference  String       @unique
  name       String
  email      String?
  phone      String?
  website    String?
  clientType ClientType   @default(INDIVIDUAL)
  status     ClientStatus @default(LEAD)
  // Informations fiscales essentielles (existantes)
  siren      String?
  siret      String?
  vatNumber  String?

  // Champs existants
  notes     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations existantes
  addresses      Address[]
  contacts       Contact[]
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  organizationId String
  user           User         @relation(fields: [userId], references: [id])
  userId         String
  quotes         Quote[]
  invoices       Invoice[]

  @@index([name, status]) // Index composé pour recherche par nom + statut
  @@index([createdAt]) // Pour les requêtes de triage par date
  @@index([updatedAt]) // Pour les requêtes de modification récente
  @@index([organizationId, clientType]) // Pour filtrer par type dans une organisation
}

// Modèles pour la gestion commerciale

model Product {
  id               String  @id @default(cuid())
  sku              String  @unique // Stock Keeping Unit
  name             String
  description      String?
  htmlDescription  String? // Description riche en HTML
  shortDescription String? // Description courte pour listings

  // Catégorisation
  categoryId String?
  category   ProductCategory? @relation(fields: [categoryId], references: [id])

  // Pricing
  price          Float
  costPrice      Float? // Prix d'achat
  compareAtPrice Float? // Prix barré (avant remise)

  // Taxes and accounting
  taxRateId      String?
  taxRate        TaxRate? @relation(fields: [taxRateId], references: [id])
  accountingCode String? // Code comptable

  // Media
  mainImageUrl String?

  // Inventory
  manageInventory Boolean     @default(true)
  inventories     Inventory[]

  // Status
  status         ProductStatus @default(ACTIVE)
  // Relations
  organization   Organization  @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  organizationId String

  // Timestamps
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  QuoteItem       QuoteItem[]
  InvoiceItem     InvoiceItem[]
  ProductSupplier ProductSupplier[]

  @@index([organizationId, status]) // Filtrer produits actifs par organisation
  @@index([organizationId, categoryId]) // Filtrer par catégorie
  @@index([price]) // Filtrer par gamme de prix
  @@index([createdAt]) // Pour triage chronologique
  @@index([sku, organizationId]) // Recherche rapide par SKU
}

enum ProductStatus {
  ACTIVE
  DRAFT
  ARCHIVED
  OUT_OF_STOCK
  DISCONTINUED
}

model ProductCategory {
  id          String    @id @default(cuid())
  name        String
  description String?
  products    Product[]

  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id])
}

model Inventory {
  id              String    @id @default(cuid())
  productId       String
  product         Product   @relation(fields: [productId], references: [id])
  warehouseId     String
  warehouse       Warehouse @relation(fields: [warehouseId], references: [id])
  currentStock    Float // Quantité en stock
  minimumStock    Float // Seuil d'alerte minimum
  optimumStock    Float // Niveau optimal
  unitCost        Float // Coût unitaire moyen
  lastStockUpdate DateTime  @default(now())

  // Métadonnées
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  stockMovements StockMovement[]

  @@unique([productId, warehouseId])
  @@index([currentStock]) // Pour requêtes sur produits en rupture ou à réapprovisionner
}

model Warehouse {
  id             String       @id @default(cuid())
  name           String
  address        String?
  isDefault      Boolean      @default(false)
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id])
  inventory      Inventory[]

  @@index([organizationId])
}

model StockMovement {
  id            String       @id @default(cuid())
  inventoryId   String
  inventory     Inventory    @relation(fields: [inventoryId], references: [id])
  quantity      Float // Positive for in, negative for out
  movementType  MovementType
  reference     String? // Reference to invoice, quote, etc.
  referenceType String? // "invoice", "quote", "manual_adjustment", etc.
  cost          Float?
  date          DateTime     @default(now())
  notes         String?
  performedBy   String? // User ID

  @@index([date]) // Recherche chronologique
  @@index([inventoryId, date]) // Mouvements d'un produit par date
  @@index([movementType]) // Filtrer par type de mouvement
}

model Quote {
  id                 String     @id @default(cuid())
  number             String // Numéro de devis
  title              String?
  clientId           String
  client             Client     @relation(fields: [clientId], references: [id])
  status             SaleStatus @default(DRAFT)
  date               DateTime   @default(now())
  expiryDate         DateTime?
  subtotal           Float
  taxAmount          Float
  totalAmount        Float
  notes              String?
  termsAndConditions String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  organizationId String
  items          QuoteItem[]
  invoices       Invoice[]
}

model QuoteItem {
  id            String        @id @default(cuid())
  quoteId       String
  quote         Quote         @relation(fields: [quoteId], references: [id], onDelete: Cascade)
  productId     String?
  product       Product?      @relation(fields: [productId], references: [id])
  description   String
  quantity      Float
  unitPrice     Float
  tax           Float
  discountType  DiscountType?
  discountValue Float? // Valeur de la remise (pourcentage ou montant fixe)
  total         Float

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Invoice {
  id                 String        @id @default(cuid())
  number             String // Numéro de facture
  clientId           String
  client             Client        @relation(fields: [clientId], references: [id])
  quoteId            String?
  quote              Quote?        @relation(fields: [quoteId], references: [id])
  status             InvoiceStatus @default(DRAFT)
  date               DateTime      @default(now())
  dueDate            DateTime
  subtotal           Float
  taxAmount          Float
  totalAmount        Float
  paidAmount         Float         @default(0)
  notes              String?
  termsAndConditions String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  organization   Organization  @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  organizationId String
  items          InvoiceItem[]
  payments       Payment[]

  @@index([organizationId, status, date]) // Factures par statut et date
  @@index([clientId, status]) // Factures d'un client par statut 
  @@index([dueDate, status]) // Pour alertes d'échéance
  @@index([totalAmount]) // Pour recherches par montant
}

model InvoiceItem {
  id            String        @id @default(cuid())
  invoiceId     String
  invoice       Invoice       @relation(fields: [invoiceId], references: [id], onDelete: Cascade)
  productId     String?
  product       Product?      @relation(fields: [productId], references: [id])
  description   String
  quantity      Float
  unitPrice     Float
  tax           Float
  discountType  DiscountType?
  discountValue Float? // Valeur de la remise (pourcentage ou montant fixe)
  total         Float

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Payment {
  id            String        @id @default(cuid())
  invoiceId     String
  invoice       Invoice       @relation(fields: [invoiceId], references: [id], onDelete: Cascade)
  amount        Float
  paymentDate   DateTime      @default(now())
  paymentMethod PaymentMethod @default(BANK_TRANSFER)
  reference     String? // Référence du paiement (numéro de chèque, etc.)
  notes         String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Nouveau modèle pour les taux de TVA
model TaxRate {
  id          String  @id @default(cuid())
  name        String // Ex: "TVA standard", "TVA réduite" 
  rate        Float // Ex: 20.0, 10.0, 5.5
  description String?
  isDefault   Boolean @default(false)

  // Spécificités françaises
  accountCode String? // Code comptable (ex: 445711 pour TVA collectée à 20%)
  euVatType   String? // Type pour déclarations EU: "GOODS", "SERVICES", "NOT_APPLICABLE"

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  products       Product[]
}

enum Civility {
  MR // Monsieur
  MRS // Madame
  MS // Mademoiselle
  DR // Docteur
  PROF // Professeur
  MASTER // Maître (pour avocats, notaires)
}

// Enums
enum InvitationStatus {
  PENDING
  ACCEPTED
  REJECTED
}

enum ClientType {
  INDIVIDUAL
  COMPANY
}

enum ClientStatus {
  LEAD
  PROSPECT
  ACTIVE
  INACTIVE
  ARCHIVED
}

enum SaleStatus {
  DRAFT
  SENT
  ACCEPTED
  REJECTED
  COMPLETED
  CANCELLED
}

enum InvoiceStatus {
  DRAFT
  SENT
  PARTIALLY_PAID
  PAID
  OVERDUE
  CANCELLED
}

enum PaymentMethod {
  BANK_TRANSFER
  CREDIT_CARD
  CHECK
  CASH
  DIRECT_DEBIT
  PAYPAL
  OTHER
}

enum DiscountType {
  PERCENTAGE
  FIXED_AMOUNT
}

enum LegalForm {
  EI // Entreprise Individuelle
  EIRL // Entreprise Individuelle à Responsabilité Limitée
  EURL // Entreprise Unipersonnelle à Responsabilité Limitée
  SARL // Société à Responsabilité Limitée
  SAS // Société par Actions Simplifiée
  SASU // Société par Actions Simplifiée Unipersonnelle
  SA // Société Anonyme
  SNC // Société en Nom Collectif
  SCI // Société Civile Immobilière
  SCOP // Société Coopérative et Participative
  ASSO // Association loi 1901
  AE // Auto-Entrepreneur
  ME // Micro-Entreprise
  OTHER // Autre forme juridique
}

enum SupplierType {
  MANUFACTURER // Fabricant
  WHOLESALER // Grossiste
  DISTRIBUTOR // Distributeur
  RETAILER // Détaillant
  SERVICE_PROVIDER // Prestataire de services
  SUBCONTRACTOR // Sous-traitant
}

enum SupplierStatus {
  ACTIVE // Actif
  INACTIVE // Inactif
  ONBOARDING // En cours d'intégration
  BLOCKED // Bloqué
  ARCHIVED // Archivé
}

enum MovementType {
  PURCHASE
  SALE
  RETURN
  ADJUSTMENT
  TRANSFER
  LOSS
}
