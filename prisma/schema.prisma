generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String         @id
  name          String
  email         String
  emailVerified Boolean
  image         String?
  createdAt     DateTime
  updatedAt     DateTime
  sessions      Session[]
  accounts      Account[]
  organizations Organization[]
  members       Member[]
  Client        Client[]

  @@unique([email])
  @@map("user")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

model Organization {
  id              String       @id @default(cuid())
  name            String
  logo            String?
  siren           String?
  siret           String?
  vatNumber       String?
  vatOptionDebits Boolean?     @default(false)
  legalForm       LegalForm?
  rcsNumber       String?
  capital         Float?
  address         String?
  city            String?
  zipCode         String?
  country         Country?
  phone           String?
  email           String?
  website         String?
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @default(now())
  clients         Client[]
  members         Member[]
  invitations     Invitation[]
  User            User?        @relation(fields: [userId], references: [id])
  userId          String?
}

model Member {
  id             String       @id @default(cuid())
  userId         String
  organizationId String
  role           Role         @default(MEMBER)
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @default(now())
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, organizationId])
}

model Invitation {
  id             String           @id @default(cuid())
  email          String
  role           Role             @default(MEMBER)
  organizationId String
  status         InvitationStatus @default(PENDING)
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @default(now())
  organization   Organization     @relation(fields: [organizationId], references: [id], onDelete: Cascade)
}

model Client {
  id             String          @id @default(cuid())
  reference      String          @unique
  name           String
  email          String?
  phone          String?
  vatNumber      String?
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  userId         String
  clientType     ClientType      @default(COMPANY)
  organizationId String
  siren          String?
  civility       Civility?
  legalForm      LegalForm?
  siret          String?
  status         ClientStatus    @default(LEAD)
  website        String?
  addresses      Address[]
  organization   Organization    @relation(fields: [organizationId], references: [id])
  user           User            @relation(fields: [userId], references: [id])
  contacts       ClientContact[]

  @@index([name])
  @@index([status])
  @@index([siren])
  @@index([siret])
}

model ClientContact {
  id        String   @id @default(cuid())
  firstName String
  lastName  String
  email     String?
  phone     String?
  isDefault Boolean? @default(false)
  title     String?
  clientId  String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  client    Client   @relation(fields: [clientId], references: [id], onDelete: Cascade)

  @@index([clientId])
}

model Address {
  id          String      @id @default(cuid())
  addressType AddressType
  line1       String
  line2       String?
  zipCode     String
  city        String
  country     String
  isDefault   Boolean     @default(false)
  clientId    String
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @default(now())
  client      Client      @relation(fields: [clientId], references: [id], onDelete: Cascade)

  @@unique([clientId, addressType, isDefault])
  @@index([clientId])
  @@index([addressType])
}

enum ClientType {
  INDIVIDUAL
  COMPANY
}

enum Role {
  OWNER
  ADMIN
  MEMBER
}

enum InvitationStatus {
  PENDING
  ACCEPTED
  REJECTED
}

enum AddressType {
  BILLING
  DELIVERY
}

enum ClientStatus {
  LEAD
  PROSPECT
  ACTIVE
  INACTIVE
  ARCHIVED
}

enum LegalForm {
  AUTO_ENTREPRENEUR
  EI
  EIRL
  EURL
  SARL
  SAS
  SASU
  SA
  SCI
  SCM
  SNC
  ASSOCIATION
  AUTRE
}

enum Civility {
  M
  Mme
  Mlle
}

enum Country {
  FR
  BE
  DE
  ES
  IT
}
