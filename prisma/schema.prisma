generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Nouvelle table pour l'année fiscale

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

model User {
  id            String   @id
  name          String
  email         String   @unique
  emailVerified Boolean
  image         String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  organizations Organization[] @relation("UserOrganizations")
  members       Member[]
  sessions      Session[]
  accounts      Account[]
  passkeys      Passkey[] // Relation avec les passkeys

  @@map("user")
}

model Passkey {
  id           String   @id @default(cuid())
  name         String?
  publicKey    String   @db.Text
  userId       String
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  credentialID String   @unique
  counter      Int      @default(0)
  deviceType   String?
  backedUp     Boolean  @default(false)
  transports   String?
  createdAt    DateTime @default(now())

  @@map("passkey")
}

model Organization {
  id        String   @id @default(cuid())
  slug      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  company           Company?
  address           Address?
  members           Member[]
  clients           Client[]
  fiscalYears       FiscalYear[]
  suppliers         Supplier[]
  products          Product[]
  productCategories ProductCategory[]

  // Relation avec User (créateur)
  user   User?   @relation("UserOrganizations", fields: [userId], references: [id])
  userId String?
}

// Modifications du modèle Client existant

model Client {
  id         String       @id @default(cuid())
  reference  String
  clientType ClientType   @default(INDIVIDUAL)
  status     ClientStatus @default(LEAD)

  // Champs existants
  notes          String?
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  company        Company?
  // Relations existantes
  addresses      Address[]
  contacts       Contact[]
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  organizationId String

  // Index composé pour recherche par nom + statut
  // Pour les requêtes de triage par date
  // Pour les requêtes de modification récente
  // Pour filtrer par type dans une organisation
  // Courant
  // Courant
  // via @@unique
  @@index([status])
  @@index([organizationId, clientType])
  @@index([reference])
}

model Contact {
  id           String    @id @default(cuid())
  civility     Civility?
  firstName    String?
  lastName     String
  function     String? // Nouveau champ pour "Fonction"
  email        String?
  phoneNumber  String? // Champ existant pour "Tél"
  mobileNumber String? // Nouveau champ pour "Mobile"
  faxNumber    String? // Nouveau champ pour "Fax"
  website      String? // Nouveau champ pour "Site web"
  isDefault    Boolean   @default(false)
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  // Relations
  supplier   Supplier? @relation(fields: [supplierId], references: [id], onDelete: Cascade)
  supplierId String?

  client   Client? @relation(fields: [clientId], references: [id])
  clientId String?
}

model Company {
  id             String          @id @default(uuid())
  name           String
  logoUrl        String?
  email          String?
  legalForm      LegalForm?
  siret          String?
  siren          String?
  phoneNumber    String?
  mobileNumber   String?
  faxNumber      String?
  website        String?
  nafApeCode     String?
  capital        String?
  rcs            String?
  vatNumber      String?
  businessSector BusinessSector?
  employeeCount  EmployeeCount?

  // Relation to client
  client   Client? @relation(fields: [clientId], references: [id], onDelete: Cascade)
  clientId String? @unique

  // Relation to supplier
  organization   Organization? @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  organizationId String?       @unique
  Supplier       Supplier?
}

model FiscalYear {
  id          String           @id @default(cuid())
  name        String // Ex: "Année fiscale 2023-2024"
  description String? // Description optionnelle
  startDate   DateTime // Date de début
  endDate     DateTime // Date de fin
  status      FiscalYearStatus @default(ACTIVE)
  isCurrent   Boolean          @default(false) // Indique l'année fiscale courante

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  organizationId String

  // Important
  // Reqûetes combo
  @@index([startDate, endDate])
  @@index([status, organizationId])
}

// Enum pour le statut de l'année fiscale

enum FiscalYearStatus {
  ACTIVE // Année fiscale en cours ou future
  CLOSED // Année fiscale clôturée, mais pas encore archivée
  ARCHIVED // Année fiscale archivée, consultable mais non modifiable
}

model Member {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId         String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  organizationId String

  @@unique([userId, organizationId])
}

model Supplier {
  id String @id @default(cuid())

  // Classification et évaluation
  type   SupplierType   @default(MANUFACTURER)
  status SupplierStatus @default(ACTIVE)

  notes String? // Notes sur le fournisseur

  // Métadonnées
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  company   Company? @relation(fields: [companyId], references: [id], onDelete: Cascade)
  companyId String?  @unique

  // Relations
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  organizationId String
  addresses      Address[]
  contacts       Contact[]
  products       Product[] // Relation avec les produits fournis

  @@index([status, organizationId])
  @@index([type, organizationId])
}

model Address {
  id           String      @id @default(cuid())
  addressType  AddressType @default(BILLING)
  addressLine1 String
  addressLine2 String?
  postalCode   String
  city         String
  country      Country     @default(FRANCE)
  latitude     Float?
  longitude    Float?
  isDefault    Boolean     @default(false)
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt

  supplier       Supplier?     @relation(fields: [supplierId], references: [id])
  supplierId     String?
  client         Client?       @relation(fields: [clientId], references: [id])
  clientId       String?
  organization   Organization? @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  organizationId String?       @unique

  @@index([supplierId])
}

enum EmployeeCount {
  ONE_TO_TWO
  THREE_TO_TEN
  ELEVEN_TO_FIFTY
  MORE_THAN_FIFTY
}

// Modèle pour les catégories de produits

model ProductCategory {
  id          String                @id @default(cuid())
  name        String // Nom de la catégorie
  description String? // Description optionnelle
  status      ProductCategoryStatus @default(ACTIVE) // Statut de la catégorie

  // Métadonnées
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  organizationId String
  products       Product[] // Produits dans cette catégorie

  // Contraintes et index
  @@unique([name, organizationId])
  @@index([status, organizationId])
}

model Product {
  id          String        @id @default(cuid())
  reference   String // Référence produit
  name        String // Nom du produit
  description String? // Description détaillée
  status      ProductStatus @default(ACTIVE)

  // Image principale
  imageUrl String? // URL de l'image principale

  // Prix et taxation
  price         Float // Prix de base HT
  purchasePrice Float? // Prix d'achat HT
  vatRate       VatRate @default(STANDARD) // Taux de TVA

  // Dimensions et poids
  weight Float? // Poids du produit en kg
  width  Float? // Largeur en cm
  height Float? // Hauteur en cm
  depth  Float? // Profondeur en cm

  // Métadonnées
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  organizationId String

  supplier   Supplier? @relation(fields: [supplierId], references: [id])
  supplierId String?

  category   ProductCategory? @relation(fields: [categoryId], references: [id])
  categoryId String?

  // Index pour optimiser les recherches
  @@unique([reference, organizationId])
  @@index([name])
  @@index([status, organizationId])
  @@index([categoryId])
  @@index([supplierId])
}

enum Civility {
  MR // Monsieur
  MRS // Madame
  MS // Mademoiselle
}

// Enums

enum AddressType {
  BILLING
  SHIPPING
  HEADQUARTERS // Siège social
  WAREHOUSE // Entrepôt
  PRODUCTION // Site de production
  COMMERCIAL // Bureau commercial
}

enum InvitationStatus {
  PENDING
  ACCEPTED
  REJECTED
}

enum ClientType {
  INDIVIDUAL
  COMPANY
}

enum ClientStatus {
  LEAD
  PROSPECT
  ACTIVE
  INACTIVE
  ARCHIVED
}

enum LegalForm {
  EI // Entreprise Individuelle
  EIRL // Entreprise Individuelle à Responsabilité Limitée
  EURL // Entreprise Unipersonnelle à Responsabilité Limitée
  SARL // Société à Responsabilité Limitée
  SAS // Société par Actions Simplifiée
  SASU // Société par Actions Simplifiée Unipersonnelle
  SA // Société Anonyme
  SNC // Société en Nom Collectif
  SCI // Société Civile Immobilière
  SCOP // Société Coopérative et Participative
  ASSO // Association loi 1901
  AE // Auto-Entrepreneur
  ME // Micro-Entreprise
  OTHER // Autre forme juridique
}

enum SupplierType {
  MANUFACTURER // Fabricant
  WHOLESALER // Grossiste
  DISTRIBUTOR // Distributeur
  RETAILER // Détaillant
  SERVICE_PROVIDER // Prestataire de services
  SUBCONTRACTOR // Sous-traitant
}

enum SupplierStatus {
  ACTIVE // Actif
  INACTIVE // Inactif
  ONBOARDING // En cours d'intégration
  BLOCKED // Bloqué
  ARCHIVED // Archivé
}

// Enum pour le statut des produits

enum ProductStatus {
  ACTIVE // Produit actif, disponible à la vente
  INACTIVE // Produit inactif, non disponible à la vente
  DRAFT // Produit en cours de création, non publié
  DISCONTINUED // Produit arrêté, plus commercialisé
  ARCHIVED // Produit archivé
}

enum Country {
  FRANCE
  GERMANY
  SPAIN
  ITALY
  UNITED_KINGDOM
  BELGIUM
  SWITZERLAND
  NETHERLANDS
  LUXEMBOURG
  PORTUGAL
  AUSTRIA
  SWEDEN
  DENMARK
  NORWAY
  FINLAND
  IRELAND
  GREECE
  POLAND
  CZECH_REPUBLIC
  HUNGARY
  ROMANIA
  BULGARIA
  CROATIA
  SLOVAKIA
  SLOVENIA
  ESTONIA
  LATVIA
  LITHUANIA
  MALTA
  CYPRUS
  UNITED_STATES
  CANADA
  AUSTRALIA
  JAPAN
  CHINA
  INDIA
  BRAZIL
  MEXICO
  ARGENTINA
  MOROCCO
  TUNISIA
  ALGERIA
  SENEGAL
  COTE_DIVOIRE
  CAMEROON
  SOUTH_AFRICA
  RUSSIA
  UKRAINE
  TURKEY
  ISRAEL
  UNITED_ARAB_EMIRATES
  QATAR
  SAUDI_ARABIA
  OTHER
}

// Enum pour le statut des catégories de produits

enum ProductCategoryStatus {
  ACTIVE // Catégorie active, visible
  ARCHIVED // Catégorie archivée
}

enum VatRate {
  STANDARD // 20% - Taux normal applicable à la majorité des biens et services
  INTERMEDIATE // 10% - Taux intermédiaire (restauration, transport...)
  REDUCED // 5.5% - Taux réduit (alimentation, livres, produits de première nécessité...)
  SUPER_REDUCED // 2.1% - Taux particulier (médicaments remboursables, presse...)
  ZERO // 0% - Pour certaines opérations internationales
  EXEMPT // Exonéré - Pour les activités exonérées de TVA
}

enum BusinessSector {
  AGRICULTURE // Agriculture, sylviculture et pêche
  INDUSTRY // Industrie manufacturière
  CONSTRUCTION // Construction
  TRADE // Commerce
  TRANSPORT // Transport et entreposage
  HOSPITALITY // Hébergement et restauration
  INFORMATION // Information et communication
  FINANCE // Activités financières et d'assurance
  REAL_ESTATE // Activités immobilières
  PROFESSIONAL // Activités spécialisées, scientifiques et techniques
  ADMINISTRATIVE // Activités de services administratifs et de soutien
  PUBLIC // Administration publique
  EDUCATION // Enseignement
  HEALTH // Santé humaine et action sociale
  ARTS // Arts, spectacles et activités récréatives
  OTHER // Autres activités de services
}
