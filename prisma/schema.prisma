generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Nouvelle table pour l'année fiscale

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

model User {
  id            String   @id
  name          String
  email         String   @unique
  emailVerified Boolean
  image         String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  organizations Organization[] @relation("UserOrganizations")
  members       Member[]
  sessions      Session[]
  accounts      Account[]
  passkeys      Passkey[] // Relation avec les passkeys

  // Nouvelle relation pour les invitations envoyées
  invitations Invitation[] @relation("invitations")

  @@map("user")
}

model Passkey {
  id           String   @id @default(cuid())
  name         String?
  publicKey    String   @db.Text
  userId       String
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  credentialID String   @unique
  counter      Int      @default(0)
  deviceType   String?
  backedUp     Boolean  @default(false)
  transports   String?
  createdAt    DateTime @default(now())

  @@map("passkey")
}

model Organization {
  id        String  @id @default(cuid())
  name      String
  legalName String?
  logoUrl   String?
  email     String?
  phone     String?
  website   String?
  siren     String? @unique
  siret     String? @unique
  vatNumber String? @unique

  // Adresse intégrée
  addressLine1 String? // Ligne principale de l'adresse
  addressLine2 String? // Informations complémentaires
  city         String? // Ville
  postalCode   String? // Code postal
  region       String? // Région, département
  country      Country @default(FRANCE) // Pays

  // Informations légales françaises
  legalForm         LegalForm? // Forme juridique (SARL, SAS, etc.)
  nafCode           String? // Code NAF/APE
  rcsNumber         String? // Numéro RCS
  rcsCity           String? // Ville du greffe d'immatriculation
  capitalAmount     Float? // Capital social
  intracomVatNumber String? // Numéro de TVA intracommunautaire

  // Mentions légales obligatoires pour factures
  invoiceFooter String? // Texte en pied de page des factures

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  members     Member[]
  clients     Client[]
  invitations Invitation[]
  fiscalYears FiscalYear[] // Relation avec les années fiscales

  // Relations pour la gestion commerciale
  suppliers         Supplier[]
  products          Product[] // Relation avec les produits
  productCategories ProductCategory[] // Relation avec les catégories de produits

  // Relation avec User (créateur)
  creator   User?   @relation("UserOrganizations", fields: [creatorId], references: [id])
  creatorId String?
}

model FiscalYear {
  id          String           @id @default(cuid())
  name        String // Ex: "Année fiscale 2023-2024"
  description String? // Description optionnelle
  startDate   DateTime // Date de début
  endDate     DateTime // Date de fin
  status      FiscalYearStatus @default(ACTIVE)
  isCurrent   Boolean          @default(false) // Indique l'année fiscale courante

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  organizationId String

  @@index([startDate, endDate]) // Important
  @@index([status, organizationId]) // Reqûetes combo
}

// Enum pour le statut de l'année fiscale

enum FiscalYearStatus {
  ACTIVE // Année fiscale en cours ou future
  CLOSED // Année fiscale clôturée, mais pas encore archivée
  ARCHIVED // Année fiscale archivée, consultable mais non modifiable
}

model Member {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId         String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  organizationId String

  @@unique([userId, organizationId])
}

model Invitation {
  id        String           @id @default(cuid())
  email     String
  status    InvitationStatus @default(PENDING)
  expiresAt DateTime
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt

  // Relations
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  organizationId String

  // Relation avec l'utilisateur qui a envoyé l'invitation
  user   User   @relation(name: "invitations", fields: [userId], references: [id])
  userId String

  // Contrainte d'unicité pour empêcher les invitations multiples
  @@unique([email, organizationId, status])
  // Index pour les recherches courantes
  @@index([email, organizationId, status]) // via @@unique
  @@index([expiresAt]) // Pour les requêtes de nettoyage
  @@index([status, email]) // Pour requêtes par statut
}

model Supplier {
  id        String  @id @default(cuid())
  name      String // Nom commercial
  legalName String? // Raison sociale
  email     String?
  phone     String?
  website   String?
  logoUrl   String?

  // Informations fiscales et légales
  siren              String?
  siret              String?
  vatNumber          String?
  registrationNumber String? // N° d'immatriculation

  // Classification et évaluation
  supplierType SupplierType   @default(MANUFACTURER)
  status       SupplierStatus @default(ACTIVE)

  notes String? // Notes sur le fournisseur

  // Métadonnées
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  organizationId String
  addresses      Address[]
  contacts       Contact[]
  products       Product[] // Relation avec les produits fournis

  @@index([name])
  @@index([status, organizationId])
  @@index([supplierType, organizationId])
}

model Contact {
  id        String    @id @default(cuid())
  civility  Civility?
  firstName String
  lastName  String
  email     String?
  phone     String?
  title     String?
  isDefault Boolean   @default(false)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  // Relations
  supplier   Supplier @relation(fields: [supplierId], references: [id], onDelete: Cascade)
  supplierId String

  client   Client? @relation(fields: [clientId], references: [id])
  clientId String?
}

model Address {
  id           String      @id @default(cuid())
  addressType  AddressType @default(BILLING)
  addressLine1 String
  addressLine2 String?
  postalCode   String
  city         String
  country      Country     @default(FRANCE)
  latitude     Float?
  longitude    Float?
  isDefault    Boolean     @default(false)
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt

  supplier   Supplier? @relation(fields: [supplierId], references: [id])
  supplierId String?
  client     Client?   @relation(fields: [clientId], references: [id])
  clientId   String?

  @@index([supplierId])
}

// Modifications du modèle Client existant

model Client {
  id         String       @id @default(cuid())
  reference  String       @unique
  name       String
  email      String?
  phone      String?
  website    String?
  clientType ClientType   @default(INDIVIDUAL)
  status     ClientStatus @default(LEAD)
  // Informations fiscales essentielles (existantes)
  siren      String?
  siret      String?
  vatNumber  String?

  // Champs existants
  notes     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations existantes
  addresses      Address[]
  contacts       Contact[]
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  organizationId String

  // Index composé pour recherche par nom + statut
  // Pour les requêtes de triage par date
  // Pour les requêtes de modification récente
  // Pour filtrer par type dans une organisation
  @@index([name, status]) // Courant
  @@index([organizationId, clientType]) // Courant
  @@index([reference]) // via @@unique
}

// Nouveau modèle pour les produits
model Product {
  id          String        @id @default(cuid())
  reference   String // Référence produit
  name        String // Nom du produit
  description String? // Description détaillée
  status      ProductStatus @default(ACTIVE)

  // Prix et taxation
  price   Float // Prix de base HT
  vatRate Float // Taux de TVA (en pourcentage)

  // Métadonnées
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  organizationId String

  supplier   Supplier? @relation(fields: [supplierId], references: [id])
  supplierId String?

  category   ProductCategory? @relation(fields: [categoryId], references: [id])
  categoryId String?

  // Index pour optimiser les recherches
  @@unique([reference, organizationId])
  @@index([name])
  @@index([status, organizationId])
  @@index([categoryId])
  @@index([supplierId])
}

// Modèle pour les catégories de produits
model ProductCategory {
  id          String                @id @default(cuid())
  name        String // Nom de la catégorie
  description String? // Description optionnelle
  slug        String // Slug pour URL
  status      ProductCategoryStatus @default(ACTIVE) // Statut de la catégorie
  imageUrl    String? // URL de l'image de la catégorie

  // Hiérarchie des catégories
  parentId String? // ID de la catégorie parente
  parent   ProductCategory?  @relation("CategoryHierarchy", fields: [parentId], references: [id])
  children ProductCategory[] @relation("CategoryHierarchy")

  // Métadonnées
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  organizationId String
  products       Product[] // Produits dans cette catégorie

  // Contraintes et index
  @@unique([slug, organizationId])
  @@index([name, organizationId])
  @@index([parentId])
  @@index([status, organizationId])
}

enum Civility {
  MR // Monsieur
  MRS // Madame
  MS // Mademoiselle
  DR // Docteur
  PROF // Professeur
  MASTER // Maître (pour avocats, notaires)
}

// Enums
enum AddressType {
  BILLING
  SHIPPING
  HEADQUARTERS // Siège social
  WAREHOUSE // Entrepôt
  PRODUCTION // Site de production
  COMMERCIAL // Bureau commercial
}

enum InvitationStatus {
  PENDING
  ACCEPTED
  REJECTED
}

enum ClientType {
  INDIVIDUAL
  COMPANY
}

enum ClientStatus {
  LEAD
  PROSPECT
  ACTIVE
  INACTIVE
  ARCHIVED
}

enum LegalForm {
  EI // Entreprise Individuelle
  EIRL // Entreprise Individuelle à Responsabilité Limitée
  EURL // Entreprise Unipersonnelle à Responsabilité Limitée
  SARL // Société à Responsabilité Limitée
  SAS // Société par Actions Simplifiée
  SASU // Société par Actions Simplifiée Unipersonnelle
  SA // Société Anonyme
  SNC // Société en Nom Collectif
  SCI // Société Civile Immobilière
  SCOP // Société Coopérative et Participative
  ASSO // Association loi 1901
  AE // Auto-Entrepreneur
  ME // Micro-Entreprise
  OTHER // Autre forme juridique
}

enum SupplierType {
  MANUFACTURER // Fabricant
  WHOLESALER // Grossiste
  DISTRIBUTOR // Distributeur
  RETAILER // Détaillant
  SERVICE_PROVIDER // Prestataire de services
  SUBCONTRACTOR // Sous-traitant
}

enum SupplierStatus {
  ACTIVE // Actif
  INACTIVE // Inactif
  ONBOARDING // En cours d'intégration
  BLOCKED // Bloqué
  ARCHIVED // Archivé
}

// Enum pour le statut des produits
enum ProductStatus {
  ACTIVE // Produit actif, disponible à la vente
  INACTIVE // Produit inactif, non disponible à la vente
  DRAFT // Produit en cours de création, non publié
  DISCONTINUED // Produit arrêté, plus commercialisé
  ARCHIVED // Produit archivé
}

enum Country {
  FRANCE
  GERMANY
  SPAIN
  ITALY
  UNITED_KINGDOM
  BELGIUM
  SWITZERLAND
  NETHERLANDS
  LUXEMBOURG
  PORTUGAL
  AUSTRIA
  SWEDEN
  DENMARK
  NORWAY
  FINLAND
  IRELAND
  GREECE
  POLAND
  CZECH_REPUBLIC
  HUNGARY
  ROMANIA
  BULGARIA
  CROATIA
  SLOVAKIA
  SLOVENIA
  ESTONIA
  LATVIA
  LITHUANIA
  MALTA
  CYPRUS
  UNITED_STATES
  CANADA
  AUSTRALIA
  JAPAN
  CHINA
  INDIA
  BRAZIL
  MEXICO
  ARGENTINA
  MOROCCO
  TUNISIA
  ALGERIA
  SENEGAL
  COTE_DIVOIRE
  CAMEROON
  SOUTH_AFRICA
  RUSSIA
  UKRAINE
  TURKEY
  ISRAEL
  UNITED_ARAB_EMIRATES
  QATAR
  SAUDI_ARABIA
  OTHER
}

// Enum pour le statut des catégories de produits
enum ProductCategoryStatus {
  ACTIVE // Catégorie active, visible
  INACTIVE // Catégorie inactive, non visible mais existante
  ARCHIVED // Catégorie archivée
}
